# coding: utf-8

"""
    ICFP Contest 2020 API

    See <a href='https://github.com/icfpcontest2020/aliens-proxy-protocol' target='_blank'>https://github.com/icfpcontest2020/aliens-proxy-protocol<a/>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class TeamTournamentDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'submission': 'SubmissionForTournamentScoreboardDto',
        'rating': 'RatingDto',
        'is_test': 'bool',
        'score': 'int'
    }

    attribute_map = {
        'submission': 'submission',
        'rating': 'rating',
        'is_test': 'isTest',
        'score': 'score'
    }

    def __init__(self, submission=None, rating=None, is_test=None, score=None):  # noqa: E501
        """TeamTournamentDto - a model defined in Swagger"""  # noqa: E501
        self._submission = None
        self._rating = None
        self._is_test = None
        self._score = None
        self.discriminator = None
        if submission is not None:
            self.submission = submission
        if rating is not None:
            self.rating = rating
        if is_test is not None:
            self.is_test = is_test
        if score is not None:
            self.score = score

    @property
    def submission(self):
        """Gets the submission of this TeamTournamentDto.  # noqa: E501


        :return: The submission of this TeamTournamentDto.  # noqa: E501
        :rtype: SubmissionForTournamentScoreboardDto
        """
        return self._submission

    @submission.setter
    def submission(self, submission):
        """Sets the submission of this TeamTournamentDto.


        :param submission: The submission of this TeamTournamentDto.  # noqa: E501
        :type: SubmissionForTournamentScoreboardDto
        """

        self._submission = submission

    @property
    def rating(self):
        """Gets the rating of this TeamTournamentDto.  # noqa: E501


        :return: The rating of this TeamTournamentDto.  # noqa: E501
        :rtype: RatingDto
        """
        return self._rating

    @rating.setter
    def rating(self, rating):
        """Sets the rating of this TeamTournamentDto.


        :param rating: The rating of this TeamTournamentDto.  # noqa: E501
        :type: RatingDto
        """

        self._rating = rating

    @property
    def is_test(self):
        """Gets the is_test of this TeamTournamentDto.  # noqa: E501


        :return: The is_test of this TeamTournamentDto.  # noqa: E501
        :rtype: bool
        """
        return self._is_test

    @is_test.setter
    def is_test(self, is_test):
        """Sets the is_test of this TeamTournamentDto.


        :param is_test: The is_test of this TeamTournamentDto.  # noqa: E501
        :type: bool
        """

        self._is_test = is_test

    @property
    def score(self):
        """Gets the score of this TeamTournamentDto.  # noqa: E501


        :return: The score of this TeamTournamentDto.  # noqa: E501
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this TeamTournamentDto.


        :param score: The score of this TeamTournamentDto.  # noqa: E501
        :type: int
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TeamTournamentDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TeamTournamentDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
