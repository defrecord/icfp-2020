# coding: utf-8

"""
    ICFP Contest 2020 API

    See <a href='https://github.com/icfpcontest2020/aliens-proxy-protocol' target='_blank'>https://github.com/icfpcontest2020/aliens-proxy-protocol<a/>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class RatingDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mu': 'float',
        'sigma': 'float',
        'conservative_rating': 'float'
    }

    attribute_map = {
        'mu': 'mu',
        'sigma': 'sigma',
        'conservative_rating': 'conservativeRating'
    }

    def __init__(self, mu=None, sigma=None, conservative_rating=None):  # noqa: E501
        """RatingDto - a model defined in Swagger"""  # noqa: E501
        self._mu = None
        self._sigma = None
        self._conservative_rating = None
        self.discriminator = None
        if mu is not None:
            self.mu = mu
        if sigma is not None:
            self.sigma = sigma
        if conservative_rating is not None:
            self.conservative_rating = conservative_rating

    @property
    def mu(self):
        """Gets the mu of this RatingDto.  # noqa: E501


        :return: The mu of this RatingDto.  # noqa: E501
        :rtype: float
        """
        return self._mu

    @mu.setter
    def mu(self, mu):
        """Sets the mu of this RatingDto.


        :param mu: The mu of this RatingDto.  # noqa: E501
        :type: float
        """

        self._mu = mu

    @property
    def sigma(self):
        """Gets the sigma of this RatingDto.  # noqa: E501


        :return: The sigma of this RatingDto.  # noqa: E501
        :rtype: float
        """
        return self._sigma

    @sigma.setter
    def sigma(self, sigma):
        """Sets the sigma of this RatingDto.


        :param sigma: The sigma of this RatingDto.  # noqa: E501
        :type: float
        """

        self._sigma = sigma

    @property
    def conservative_rating(self):
        """Gets the conservative_rating of this RatingDto.  # noqa: E501


        :return: The conservative_rating of this RatingDto.  # noqa: E501
        :rtype: float
        """
        return self._conservative_rating

    @conservative_rating.setter
    def conservative_rating(self, conservative_rating):
        """Sets the conservative_rating of this RatingDto.


        :param conservative_rating: The conservative_rating of this RatingDto.  # noqa: E501
        :type: float
        """

        self._conservative_rating = conservative_rating

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RatingDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RatingDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
