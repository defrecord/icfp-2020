# coding: utf-8

"""
    ICFP Contest 2020 API

    See <a href='https://github.com/icfpcontest2020/aliens-proxy-protocol' target='_blank'>https://github.com/icfpcontest2020/aliens-proxy-protocol<a/>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GamesListDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'has_more': 'bool',
        'next': 'datetime',
        'games': 'list[GameDto]'
    }

    attribute_map = {
        'has_more': 'hasMore',
        'next': 'next',
        'games': 'games'
    }

    def __init__(self, has_more=None, next=None, games=None):  # noqa: E501
        """GamesListDto - a model defined in Swagger"""  # noqa: E501
        self._has_more = None
        self._next = None
        self._games = None
        self.discriminator = None
        if has_more is not None:
            self.has_more = has_more
        if next is not None:
            self.next = next
        if games is not None:
            self.games = games

    @property
    def has_more(self):
        """Gets the has_more of this GamesListDto.  # noqa: E501


        :return: The has_more of this GamesListDto.  # noqa: E501
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this GamesListDto.


        :param has_more: The has_more of this GamesListDto.  # noqa: E501
        :type: bool
        """

        self._has_more = has_more

    @property
    def next(self):
        """Gets the next of this GamesListDto.  # noqa: E501


        :return: The next of this GamesListDto.  # noqa: E501
        :rtype: datetime
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this GamesListDto.


        :param next: The next of this GamesListDto.  # noqa: E501
        :type: datetime
        """

        self._next = next

    @property
    def games(self):
        """Gets the games of this GamesListDto.  # noqa: E501


        :return: The games of this GamesListDto.  # noqa: E501
        :rtype: list[GameDto]
        """
        return self._games

    @games.setter
    def games(self, games):
        """Sets the games of this GamesListDto.


        :param games: The games of this GamesListDto.  # noqa: E501
        :type: list[GameDto]
        """

        self._games = games

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GamesListDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GamesListDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
