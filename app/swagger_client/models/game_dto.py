# coding: utf-8

"""
    ICFP Contest 2020 API

    See <a href='https://github.com/icfpcontest2020/aliens-proxy-protocol' target='_blank'>https://github.com/icfpcontest2020/aliens-proxy-protocol<a/>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class GameDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'game_id': 'str',
        'tournament_id': 'int',
        'tournament_round_id': 'int',
        'created_at': 'datetime',
        'finished_at': 'datetime',
        'ticks': 'int',
        'attacker': 'PlayerDto',
        'defender': 'PlayerDto',
        'winner': 'GameWinner'
    }

    attribute_map = {
        'game_id': 'gameId',
        'tournament_id': 'tournamentId',
        'tournament_round_id': 'tournamentRoundId',
        'created_at': 'createdAt',
        'finished_at': 'finishedAt',
        'ticks': 'ticks',
        'attacker': 'attacker',
        'defender': 'defender',
        'winner': 'winner'
    }

    def __init__(self, game_id=None, tournament_id=None, tournament_round_id=None, created_at=None, finished_at=None, ticks=None, attacker=None, defender=None, winner=None):  # noqa: E501
        """GameDto - a model defined in Swagger"""  # noqa: E501
        self._game_id = None
        self._tournament_id = None
        self._tournament_round_id = None
        self._created_at = None
        self._finished_at = None
        self._ticks = None
        self._attacker = None
        self._defender = None
        self._winner = None
        self.discriminator = None
        if game_id is not None:
            self.game_id = game_id
        if tournament_id is not None:
            self.tournament_id = tournament_id
        if tournament_round_id is not None:
            self.tournament_round_id = tournament_round_id
        if created_at is not None:
            self.created_at = created_at
        if finished_at is not None:
            self.finished_at = finished_at
        if ticks is not None:
            self.ticks = ticks
        if attacker is not None:
            self.attacker = attacker
        if defender is not None:
            self.defender = defender
        if winner is not None:
            self.winner = winner

    @property
    def game_id(self):
        """Gets the game_id of this GameDto.  # noqa: E501


        :return: The game_id of this GameDto.  # noqa: E501
        :rtype: str
        """
        return self._game_id

    @game_id.setter
    def game_id(self, game_id):
        """Sets the game_id of this GameDto.


        :param game_id: The game_id of this GameDto.  # noqa: E501
        :type: str
        """

        self._game_id = game_id

    @property
    def tournament_id(self):
        """Gets the tournament_id of this GameDto.  # noqa: E501


        :return: The tournament_id of this GameDto.  # noqa: E501
        :rtype: int
        """
        return self._tournament_id

    @tournament_id.setter
    def tournament_id(self, tournament_id):
        """Sets the tournament_id of this GameDto.


        :param tournament_id: The tournament_id of this GameDto.  # noqa: E501
        :type: int
        """

        self._tournament_id = tournament_id

    @property
    def tournament_round_id(self):
        """Gets the tournament_round_id of this GameDto.  # noqa: E501


        :return: The tournament_round_id of this GameDto.  # noqa: E501
        :rtype: int
        """
        return self._tournament_round_id

    @tournament_round_id.setter
    def tournament_round_id(self, tournament_round_id):
        """Sets the tournament_round_id of this GameDto.


        :param tournament_round_id: The tournament_round_id of this GameDto.  # noqa: E501
        :type: int
        """

        self._tournament_round_id = tournament_round_id

    @property
    def created_at(self):
        """Gets the created_at of this GameDto.  # noqa: E501


        :return: The created_at of this GameDto.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GameDto.


        :param created_at: The created_at of this GameDto.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def finished_at(self):
        """Gets the finished_at of this GameDto.  # noqa: E501


        :return: The finished_at of this GameDto.  # noqa: E501
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this GameDto.


        :param finished_at: The finished_at of this GameDto.  # noqa: E501
        :type: datetime
        """

        self._finished_at = finished_at

    @property
    def ticks(self):
        """Gets the ticks of this GameDto.  # noqa: E501


        :return: The ticks of this GameDto.  # noqa: E501
        :rtype: int
        """
        return self._ticks

    @ticks.setter
    def ticks(self, ticks):
        """Sets the ticks of this GameDto.


        :param ticks: The ticks of this GameDto.  # noqa: E501
        :type: int
        """

        self._ticks = ticks

    @property
    def attacker(self):
        """Gets the attacker of this GameDto.  # noqa: E501


        :return: The attacker of this GameDto.  # noqa: E501
        :rtype: PlayerDto
        """
        return self._attacker

    @attacker.setter
    def attacker(self, attacker):
        """Sets the attacker of this GameDto.


        :param attacker: The attacker of this GameDto.  # noqa: E501
        :type: PlayerDto
        """

        self._attacker = attacker

    @property
    def defender(self):
        """Gets the defender of this GameDto.  # noqa: E501


        :return: The defender of this GameDto.  # noqa: E501
        :rtype: PlayerDto
        """
        return self._defender

    @defender.setter
    def defender(self, defender):
        """Sets the defender of this GameDto.


        :param defender: The defender of this GameDto.  # noqa: E501
        :type: PlayerDto
        """

        self._defender = defender

    @property
    def winner(self):
        """Gets the winner of this GameDto.  # noqa: E501


        :return: The winner of this GameDto.  # noqa: E501
        :rtype: GameWinner
        """
        return self._winner

    @winner.setter
    def winner(self, winner):
        """Sets the winner of this GameDto.


        :param winner: The winner of this GameDto.  # noqa: E501
        :type: GameWinner
        """

        self._winner = winner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GameDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GameDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
