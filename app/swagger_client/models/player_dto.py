# coding: utf-8

"""
    ICFP Contest 2020 API

    See <a href='https://github.com/icfpcontest2020/aliens-proxy-protocol' target='_blank'>https://github.com/icfpcontest2020/aliens-proxy-protocol<a/>  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six


class PlayerDto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'submission_id': 'int',
        'team': 'TeamDto',
        'debug_log': 'str',
        'player_key': 'str',
        'timeout': 'bool'
    }

    attribute_map = {
        'submission_id': 'submissionId',
        'team': 'team',
        'debug_log': 'debugLog',
        'player_key': 'playerKey',
        'timeout': 'timeout'
    }

    def __init__(self, submission_id=None, team=None, debug_log=None, player_key=None, timeout=None):  # noqa: E501
        """PlayerDto - a model defined in Swagger"""  # noqa: E501
        self._submission_id = None
        self._team = None
        self._debug_log = None
        self._player_key = None
        self._timeout = None
        self.discriminator = None
        if submission_id is not None:
            self.submission_id = submission_id
        if team is not None:
            self.team = team
        if debug_log is not None:
            self.debug_log = debug_log
        if player_key is not None:
            self.player_key = player_key
        if timeout is not None:
            self.timeout = timeout

    @property
    def submission_id(self):
        """Gets the submission_id of this PlayerDto.  # noqa: E501


        :return: The submission_id of this PlayerDto.  # noqa: E501
        :rtype: int
        """
        return self._submission_id

    @submission_id.setter
    def submission_id(self, submission_id):
        """Sets the submission_id of this PlayerDto.


        :param submission_id: The submission_id of this PlayerDto.  # noqa: E501
        :type: int
        """

        self._submission_id = submission_id

    @property
    def team(self):
        """Gets the team of this PlayerDto.  # noqa: E501


        :return: The team of this PlayerDto.  # noqa: E501
        :rtype: TeamDto
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this PlayerDto.


        :param team: The team of this PlayerDto.  # noqa: E501
        :type: TeamDto
        """

        self._team = team

    @property
    def debug_log(self):
        """Gets the debug_log of this PlayerDto.  # noqa: E501


        :return: The debug_log of this PlayerDto.  # noqa: E501
        :rtype: str
        """
        return self._debug_log

    @debug_log.setter
    def debug_log(self, debug_log):
        """Sets the debug_log of this PlayerDto.


        :param debug_log: The debug_log of this PlayerDto.  # noqa: E501
        :type: str
        """

        self._debug_log = debug_log

    @property
    def player_key(self):
        """Gets the player_key of this PlayerDto.  # noqa: E501


        :return: The player_key of this PlayerDto.  # noqa: E501
        :rtype: str
        """
        return self._player_key

    @player_key.setter
    def player_key(self, player_key):
        """Sets the player_key of this PlayerDto.


        :param player_key: The player_key of this PlayerDto.  # noqa: E501
        :type: str
        """

        self._player_key = player_key

    @property
    def timeout(self):
        """Gets the timeout of this PlayerDto.  # noqa: E501


        :return: The timeout of this PlayerDto.  # noqa: E501
        :rtype: bool
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this PlayerDto.


        :param timeout: The timeout of this PlayerDto.  # noqa: E501
        :type: bool
        """

        self._timeout = timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayerDto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayerDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
